"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[7581],{8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var t=a(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},8812:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"dullahan/asset/programatically_manage","title":"Manage interfaces","description":"For programmatic use of the Asset Bundle we have set few interfaces:","source":"@site/docs/dullahan/asset/programatically_manage.md","sourceDirName":"dullahan/asset","slug":"/dullahan/asset/programatically_manage","permalink":"/docs/dullahan/asset/programatically_manage","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/dullahan/asset/programatically_manage.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Manage interfaces"},"sidebar":"tutorialSidebar","previous":{"title":"Asset API","permalink":"/docs/dullahan/asset/crud"},"next":{"title":"Entity integration","permalink":"/docs/dullahan/asset/entity_integration"}}');var s=a(4848),r=a(8453);const i={sidebar_position:3,sidebar_label:"Manage interfaces"},l="Manage interfaces",c={},o=[{value:"Asset aggregate",id:"asset-aggregate",level:2},{value:"Create new asset",id:"create-new-asset",level:2},{value:"Create new folder",id:"create-new-folder",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"manage-interfaces",children:"Manage interfaces"})}),"\n",(0,s.jsx)(n.p,{children:"For programmatic use of the Asset Bundle we have set few interfaces:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"AssetServiceInterface"}),"\n",(0,s.jsx)(n.li,{children:"AssetSerializerInterface"}),"\n",(0,s.jsx)(n.li,{children:"AssetFileManagerInterface"}),"\n",(0,s.jsx)(n.li,{children:"AssetMiddlewareInterface"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["and ",(0,s.jsx)(n.code,{children:"Asset"})," aggregator you can use to manage most actions."]}),"\n",(0,s.jsx)(n.p,{children:"They give the needed abstraction for managing your assets."}),"\n",(0,s.jsx)(n.h2,{id:"asset-aggregate",children:"Asset aggregate"}),"\n",(0,s.jsx)(n.p,{children:"Asset aggregate is made from three object:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Structure - defines information about the asset like path, name, type"}),"\n",(0,s.jsx)(n.li,{children:"Entity - the actual object representing information in database"}),"\n",(0,s.jsx)(n.li,{children:"Context - additional necessary information"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"create-new-asset",children:"Create new asset"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Dullahan\\Asset\\Port\\Presentation\\AssetServiceInterface;\nuse Dullahan\\Asset\\Domain\\File;\nuse Dullahan\\Asset\\Domain\\Asset;\nuse Dullahan\\Asset\\Port\\Presentation\\AssetMiddlewareInterface;\n\n/**\n * @phpstan-import-type AssetSerialized from \\Dullahan\\Asset\\Port\\Presentation\\AssetSerializerInterface\n */\nclass CreateAssetExample {\n    public function __construct(\n        private AssetServiceInterface $assetService,\n        private AssetMiddlewareInterface $assetMiddleware,\n    ) {\n    }\n\n    public function uploadAsset(): Asset\n    {\n        $filepath = '/path/to/resource.png';\n        $file = new File(\n            path: '/example',\n            name: 'new_image',\n            originalName: 'example',\n            resource: fopen(filepath),\n            size: (int) filesize(filepath),\n            extension: 'png',\n            mimeType: 'image/png',\n        );\n\n        $asset = $this->assetService->create($file);\n        $this->assetService->flush();\n\n        return asset;\n    }\n\n    /**\n     * @return AssetSerialized\n     */\n    public function uploadAssetUsingMiddleware(): array\n    {\n        return $this->assetMiddleware->upload(\n            name: 'new_image',\n            path: '/example',\n            resource: fopen(filepath),\n            originalName: 'example',\n            size: (int) filesize(filepath),\n            extension: 'png',\n            mimeType: 'image/png',\n        );\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"create-new-folder",children:"Create new folder"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Dullahan\\Asset\\Domain\\Directory;\nuse Dullahan\\Asset\\Port\\Presentation\\AssetServiceInterface;\nuse Dullahan\\Asset\\Domain\\Asset;\nuse Dullahan\\Asset\\Port\\Presentation\\AssetMiddlewareInterface;\n\nclass CreateFolderExample {\n    public function __construct(\n        private AssetServiceInterface $assetService,\n        private AssetMiddlewareInterface $assetMiddleware,\n    ) {\n    }\n\n    public function createFolder(): Asset\n    {\n        $asset = $this->assetService->create(new Directory('/newFolder'));\n        $this->assetService->flush();\n\n        return asset;\n    }\n\n    /**\n     * @return AssetSerialized\n     */\n    public function createFolderUsingMiddleware(): array\n    {\n        return $this->assetMiddleware->folder('/', 'newFolder'),\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);