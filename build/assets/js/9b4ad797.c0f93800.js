"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[6636],{4899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"dullahan/asset/entity_integration","title":"Entity integration","description":"Asset Bundle has a build way to define asset fields inside entities managed by","source":"@site/docs/dullahan/asset/entity_integration.md","sourceDirName":"dullahan/asset","slug":"/dullahan/asset/entity_integration","permalink":"/docs/dullahan/asset/entity_integration","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/dullahan/asset/entity_integration.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Entity integration"},"sidebar":"tutorialSidebar","previous":{"title":"Manage interfaces","permalink":"/docs/dullahan/asset/programatically_manage"},"next":{"title":"Events","permalink":"/docs/dullahan/asset/event"}}');var i=n(4848),r=n(8453);const a={sidebar_position:4,sidebar_label:"Entity integration"},o="Entity integration",l={},d=[{value:"Asset attribute parameters",id:"asset-attribute-parameters",level:2},{value:"conjoined",id:"conjoined",level:3},{value:"private",id:"private",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"entity-integration",children:"Entity integration"})}),"\n",(0,i.jsxs)(t.p,{children:["Asset Bundle has a build way to define asset fields inside entities managed by\r\n",(0,i.jsx)(t.a,{href:"/docs/dullahan/entity/",children:"Entity Bundle"}),". It works by annotating field with ",(0,i.jsx)(t.code,{children:"Asset"})," attribute."]}),"\n",(0,i.jsxs)(t.p,{children:["Here is our example entity from ",(0,i.jsx)(t.a,{href:"/docs/dullahan/entity/first_object",children:"creating your first entity"}),", let's add a hero\r\nimage to our post:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"use Dullahan\\Asset\\Domain\\Attribute\\Asset;\r\nuse Dullahan\\Asset\\Domain\\Entity\\AssetPointer;\r\n\r\n#[ORM\\Entity(repositoryClass: PostRepository::class)]\r\n#[Dullahan\\Entity(PostConstraint::class)]\r\nclass Post implements OwnerlessManageableInterface\r\n{\r\n    // ...\r\n\r\n    #[Asset]\r\n    #[Dullahan\\Field]\r\n    #[ORM\\Column(length: 255)]\r\n    #[ORM\\OneToOne(cascade: ['persist', 'remove'])]\r\n    private ?AssetPointer $hero = null;\r\n\r\n    // ...\n"})}),"\n",(0,i.jsxs)(t.p,{children:["And let's extend our ",(0,i.jsx)(t.a,{href:"/docs/dullahan/entity/first_object#validation",children:"validation class"})," to accommodate that change:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"class PostConstraint implements EntityValidateConstraintInterface\r\n{\r\n    // ...\r\n\r\n    protected static function getConstraint(): array\r\n    {\r\n        return [\r\n            // ...\r\n            'hero' => new Assert\\Optional([\r\n                new Assert\\Positive([\r\n                    'message' => 'Hero image must be an integer',\r\n                ]),\r\n            ]),\r\n        ];\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"Now we can create or update our post with chosen asset:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-http",children:'POST http://dullahan.localhost/_/user/entity/create/main/Post\r\nContent-Type: application/json\r\nAuthorization: ...\r\nX-CSRF-Token: ...\r\nAccept: application/json\r\n\r\n{\r\n  "dataSet": {\r\n    "id": 1,\r\n    "hero": 1\r\n  },\r\n  "entity": {\r\n    "hero": 1\r\n  }\r\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This request will automatically generate new ",(0,i.jsx)(t.code,{children:"AssetPointer"})," creating relation between our entity and chosen asset (ID of 1)."]}),"\n",(0,i.jsx)(t.p,{children:"The same principal applies when using Entity Manage Interfaces to programmatically set the image:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:'use Dullahan\\Entity\\Port\\Application\\EntityPersistManagerInterface;\r\n\r\nclass SetHeroImage {\r\n    public function __construct(\r\n        private EntityPersistManagerInterface $entityPersistManager,\r\n    ) {\r\n    }\r\n\r\n    public function setHeroImageOnPost(Post $post, Asset $asset): void\r\n    {\r\n        $post = $this->entityPersistManager->update($post::class, $post->getId(), [\r\n            "hero" => $asset->getId(),\r\n        ]);\r\n\r\n        echo $post->getHero()::class; // Dullahan\\Asset\\Domain\\Entity\\AssetPointer\r\n        var_dump($post->getHero()->getAsset() === $asset) // bool(true)\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This will also generate new ",(0,i.jsx)(t.code,{children:"AssetPointer"})," during the flow."]}),"\n",(0,i.jsx)(t.h2,{id:"asset-attribute-parameters",children:"Asset attribute parameters"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"Asset"})," attribute has few useful parameters that can help you with managing your entities."]}),"\n",(0,i.jsx)(t.h3,{id:"conjoined",children:"conjoined"}),"\n",(0,i.jsxs)(t.p,{children:["When asset is marked as ",(0,i.jsx)(t.code,{children:"conjoined"})," it will be removed together with assigned entity. It is useful when entity has\r\na unique image assigned to them and is not used anywhere else - por example user avatar."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"class Post implements OwnerlessManageableInterface\r\n{\r\n    #[Asset(conjoined: true)]\r\n    private ?AssetPointer $hero = null;\n"})}),"\n",(0,i.jsx)(t.admonition,{title:"Not Asset Pointer",type:"tip",children:(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"AssetPointer"})," is removed anytime one of the parts of the relation is removed (be it Asset or Entity) but conjoined\r\nactually removes the ",(0,i.jsx)(t.code,{children:"Asset"})," entity from database when Entity is deleted but when ",(0,i.jsx)(t.code,{children:"Asset"})," is remove the related Entity\r\nwill stay."]})}),"\n",(0,i.jsx)(t.admonition,{title:"Multiple entities on conjoined image",type:"tip",children:(0,i.jsxs)(t.p,{children:["It is possible to have multiple entities point to the same conjoined ",(0,i.jsx)(t.code,{children:"Asset"}),". But when at least one of those Entities\r\nis removed, the ",(0,i.jsx)(t.code,{children:"Asset"})," (and its other relations) will also be deleted leaving the rest of Entities with empty fields."]})}),"\n",(0,i.jsx)(t.h3,{id:"private",children:"private"}),"\n",(0,i.jsx)(t.admonition,{title:"Deprecated",type:"danger"})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);