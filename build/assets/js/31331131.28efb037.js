"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[5815],{3341:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"dullahan/monitor/persisted_error","title":"Persisted errors","description":"The Monitor Bundles persist unexpected errors with Trace entity which holds information about the error, request and","source":"@site/docs/dullahan/monitor/persisted_error.md","sourceDirName":"dullahan/monitor","slug":"/dullahan/monitor/persisted_error","permalink":"/docs/dullahan/monitor/persisted_error","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/dullahan/monitor/persisted_error.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Persisted errors"},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/docs/dullahan/monitor/"},"next":{"title":"Main Bundle","permalink":"/docs/category/main-bundle"}}');var o=t(4848),s=t(8453);const i={sidebar_position:1,sidebar_label:"Persisted errors"},a="Persisted errors",d={},c=[];function l(e){const r={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"persisted-errors",children:"Persisted errors"})}),"\n",(0,o.jsxs)(r.p,{children:["The Monitor Bundles persist unexpected errors with ",(0,o.jsx)(r.code,{children:"Trace"})," entity which holds information about the error, request and\r\nuser. Traces can be viewed straight in the database or retrieve with ",(0,o.jsx)(r.code,{children:"TraceRepository"}),"."]}),"\n",(0,o.jsxs)(r.p,{children:["If you want to extend what exceptions are recorded you can use ",(0,o.jsx)(r.code,{children:"TraceServiceInterface"})," to save additional errors:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-php",children:"try {\r\n    // some error prone code\r\n} catch (\\Throwable $e) {\r\n    $this->traceService->create($e);\r\n    // If you want to provide your own request and response object you can pass them to the method\r\n    // but know that TraceService will try to retrieve the last request and last response if\r\n    // one is not provided\r\n    $this->traceService->create($e, $request, $response);\r\n\r\n}\n"})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>a});var n=t(6540);const o={},s=n.createContext(o);function i(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);