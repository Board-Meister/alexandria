"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[3847],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}},9877:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"marshal/installation","title":"Installation","description":"To install Marshal you can use your package manager to add it as a dependency, for example:","source":"@site/docs/marshal/installation.md","sourceDirName":"marshal","slug":"/marshal/installation","permalink":"/docs/marshal/installation","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/marshal/installation.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Installation"},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/docs/marshal/"},"next":{"title":"Dependencies","permalink":"/docs/marshal/dependency"}}');var i=t(4848),a=t(8453);const s={sidebar_position:2,sidebar_label:"Installation"},o="Installation",l={},d=[{value:"How to register plugin",id:"how-to-register-plugin",level:2},{value:"How to create entry file",id:"how-to-create-entry-file",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"installation",children:"Installation"})}),"\n",(0,i.jsx)(n.p,{children:"To install Marshal you can use your package manager to add it as a dependency, for example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm i @boardmeister/marshal\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Local installation",type:"tip",children:(0,i.jsxs)(n.p,{children:["Although there is no CDN version, there is a minified Javascript version ready to be downloaded in repository\r\n",(0,i.jsx)(n.a,{href:"https://github.com/Board-Meister/marshal/blob/master/dist/index.js",children:"here"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"then you can require it in your script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="ES module example"',children:"import Marshal from '@boardmeister/marshal';\r\n\r\nconst marshal = new Marshal();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-register-plugin",children:"How to register plugin"}),"\n",(0,i.jsx)(n.p,{children:"To starting using Marshal as your plugin manager you firstly have to create your plugin definitions. Each definition\r\nmust be made of:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"entry"})," - Most important part, defines the plugin uniques and configuration file location."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type"})," - defines if is it just a plugin/module or a scope"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"additional settings will be discussed later, for now lets create your first registration config:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="manager.ts"',children:"import Marshal, { RegisterConfig } from '@boardmeister/marshal';\r\n\r\nconst marshal = new Marshal();\r\n\r\n// Minimal version of the registration object\r\nconst menuManagerDefinition: RegisterConfig = {\r\n    entry: {\r\n        source: 'http://cdn.boardmeister.com/plugin/boardmeister/menu-manager',\r\n        namespace: 'boardmeister',\r\n        name: 'menu-manager',\r\n        version: '1.0.0',\r\n    },\r\n    type: 'module',\r\n}\r\n\r\n// With now ready registration object we can register new plugin\r\nmarshal.register(menuManagerDefinition);\r\n\r\n// With registered plugins we can start loading them\r\n// This method will load, initialize and inject required dependencies to all registered plugins\r\nawait marshal.load();\n"})}),"\n",(0,i.jsx)(n.p,{children:"With registration and plugin initialization script ready we still need the actual plugin file."}),"\n",(0,i.jsx)(n.h2,{id:"how-to-create-entry-file",children:"How to create entry file"}),"\n",(0,i.jsxs)(n.p,{children:["To finalize plugin creation we still need the actual entry file for the plugin. It will decide when the actual plugin\r\nwill be loaded and how - it should be ",(0,i.jsx)("u",{children:"as small as possible"})," as it will be always loaded at the start.\r\nOptimal size for the config is about ~1KB."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="plugin.conf.ts"',children:'// Import helper interfaces from marshal\r\nimport type { IInjectable, Module } from "@boardmeister/marshal"\r\nimport type Marshal from "@boardmeister/marshal";\r\n\r\n// Your helper interface defining you injected dependencies\r\nexport interface IInjected {\r\n  marshal: Marshal;\r\n}\r\n\r\nclass MenuManagerPluginEntry {\r\n  #injected?: IInjected;\r\n\r\n  // How to define dependency and what this syntax does will be explained more thoroughly in later pages\r\n  // For now you just have to know that what you define in static `inject` variable will be injected by manager\r\n  static inject: Record<string, string> = {\r\n    marshal: \'boardmeister/marshal\', // Marshal is always registered and available to be retrieved\r\n  }\r\n  inject(injections: IInjected): void {\r\n    this.#injected = injections;\r\n  }\r\n\r\n  /**\r\n   * The rest of the file is for your use! We added everything that we need to have working plugin now you have to\r\n   * decide what it does and how it interacts with the page.\r\n   */\r\n}\r\n\r\n// To allows for static and non-static method verification with Typescript we have to create new variable with\r\n// this specific hint\r\nconst EnMenuManagerPluginEntry: IInjectable<IInjected> = AntetypeCore;\r\n\r\n// It is very important that entry is exported as a default!\r\nexport default EnMenuManagerPluginEntry;\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If you've create plugin using Typescript you will have to convert it to Javascript be it by using whole framework like\r\nVite or just package like ",(0,i.jsx)(n.code,{children:"typescript"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"When converted to Javascript it should look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="plugin.conf.js"',children:'class MenuManagerPluginEntry {\r\n    #injected;\r\n    static inject = { marshal: "boardmeister/marshal" };\r\n    inject(injected) {\r\n        this.#injected = injected;\r\n    }\r\n}\r\nconst EnMenuManagerPluginEntry = MenuManagerPluginEntry;\r\nexport { EnMenuManagerPluginEntry as default };\n'})}),"\n",(0,i.jsxs)(n.p,{children:["With file ready we can now start the script in ",(0,i.jsx)(n.code,{children:"manager.ts"})," file and verify that our plugin was loaded!"]}),"\n",(0,i.jsx)(n.p,{children:"With this success we are ready to go forth and learn all how to require other plugins, create scopes,\r\nretrieved tagged modules, how to lazy load, how to retrieve associated assets and more!"})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);