"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[6070],{152:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"dullahan/main/api","title":"REST API","description":"For the REST API we can find quite a few classes and functionality:","source":"@site/docs/dullahan/main/api.md","sourceDirName":"dullahan/main","slug":"/dullahan/main/api","permalink":"/docs/dullahan/main/api","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/dullahan/main/api.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"REST API"},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/docs/dullahan/main/"},"next":{"title":"Utility","permalink":"/docs/dullahan/main/util"}}');var s=r(4848),o=r(8453);const a={sidebar_position:1,sidebar_label:"REST API"},i="REST API",l={},c=[{value:"Response",id:"response",level:2},{value:"Swagger\\Open API",id:"swaggeropen-api",level:2},{value:"HTTP Util",id:"http-util",level:2},{value:"Error Collector",id:"error-collector",level:2},{value:"RequestInterface &amp;&amp; Request",id:"requestinterface--request",level:2},{value:"Request factory",id:"request-factory",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rest-api",children:"REST API"})}),"\n",(0,s.jsx)(n.p,{children:"For the REST API we can find quite a few classes and functionality:"}),"\n",(0,s.jsx)(n.h2,{id:"response",children:"Response"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Response"})," class is a implementation of the standard response described in ",(0,s.jsx)(n.a,{href:"/docs/dullahan/api",children:"REST API"}),"\r\ndocumentation. Use when defining Saga events or when creating responses for the controller actions."]}),"\n",(0,s.jsx)(n.h2,{id:"swaggeropen-api",children:"Swagger\\Open API"}),"\n",(0,s.jsxs)(n.p,{children:["For the ",(0,s.jsx)(n.code,{children:"Swagger"})," or ",(0,s.jsx)(n.code,{children:"Open API"})," auto documentation we have few helpers classes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"ResponseAbstractDTO"}),"\n",(0,s.jsx)(n.li,{children:"FailureDTO"}),"\n",(0,s.jsx)(n.li,{children:"SuccessDTO"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You can use the like, so:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class AdminRegisteredDTO extends SuccessDTO\r\n{\r\n    #[SWG\\Property(example: 'Admin registered', description: 'Description of the successful request')]\r\n    public string $message;\r\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"#[SWG\\Response(\r\n    description: 'Admin registered',\r\n    content: new Model(type: AdminRegisteredDTO::class),\r\n    response: 200\r\n)]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"http-util",children:"HTTP Util"}),"\n",(0,s.jsx)(n.admonition,{title:"DEPRECATED",type:"danger"}),"\n",(0,s.jsx)(n.h2,{id:"error-collector",children:"Error Collector"}),"\n",(0,s.jsx)(n.p,{children:"The Error collector class is responsible for saving all errors that happened during execution and returning them tu\r\nuser. When converting exception to the proper JSON response, services automatically attaches all error saved with\r\nError Collector."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Dullahan\\Main\\Contract\\ErrorCollectorInterface;\r\n\r\nclass SaveErrorExample {\r\n    public function __construct(\r\n        protected ErrorCollectorInterface $errorCollector,\r\n    ) {\r\n    }\r\n\r\n    public function addError(): void\r\n    {\r\n        $this->errorCollector->addError('Error for nested form field', ['user', 'name']);\r\n        // This will error that will be resolved to ['user' => ['name' => ['Error for nested form field']]]\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"requestinterface--request",children:"RequestInterface && Request"}),"\n",(0,s.jsxs)(n.p,{children:["Dullahan has its own implementation of the ",(0,s.jsx)(n.code,{children:"RequestInterface"})," but feel free to define your own. ",(0,s.jsx)(n.code,{children:"Request"})," class is used\r\nto hold all required data about the request and the original request."]}),"\n",(0,s.jsx)(n.h2,{id:"request-factory",children:"Request factory"}),"\n",(0,s.jsxs)(n.p,{children:["To convert one type of request to the universal implementing ",(0,s.jsx)(n.code,{children:"RequestInterface"})," we use RequestFactory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Dullahan\\Main\\Service\\RequestFactory;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\n\r\nclass ConvertSymfonyRequestExample {\r\n    public function __construct(\r\n        protected RequestFactory $requestFactory,\r\n    ) {\r\n    }\r\n\r\n    public function convertRequest(Request $symfonyRequest): void\r\n    {\r\n        $dullahanRequest = $this->requestFactory->symfonyToDullahanRequest($symfonyRequest);\r\n    }\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(6540);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);