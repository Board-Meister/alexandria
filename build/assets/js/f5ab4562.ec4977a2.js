"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[9396],{5830:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"dullahan/api","title":"Rest API","description":"Dullahan allows for communication with architectural style of Rest API.","source":"@site/docs/dullahan/api.md","sourceDirName":"dullahan","slug":"/dullahan/api","permalink":"/docs/dullahan/api","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/dullahan/api.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Rest API"},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/docs/dullahan/"},"next":{"title":"Events","permalink":"/docs/dullahan/events"}}');var a=t(4848),s=t(8453);const i={sidebar_position:2,sidebar_label:"Rest API"},o="Rest API",l={},d=[{value:"Standardized Response",id:"standardized-response",level:2},{value:"Automatic error conversion",id:"automatic-error-conversion",level:2},{value:"Automatic OpenAPI documentation",id:"automatic-openapi-documentation",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"rest-api",children:"Rest API"})}),"\n",(0,a.jsxs)(n.p,{children:["Dullahan allows for communication with architectural style of ",(0,a.jsx)(n.a,{href:"https://www.ibm.com/think/topics/rest-apis",children:"Rest API"}),".\r\nAny route related to Dullahan is prefixed with ",(0,a.jsx)(n.code,{children:"/_/"})," as to separate it from default system route matching.\r\nRoutes that starts with the space (",(0,a.jsx)(n.code,{children:"/_/"}),") are automatically handled by the Dullahan. For example any exception that\r\nhappened in the headless namespace (",(0,a.jsx)(n.code,{children:"/_/"}),") will be transformed to the default JSON response automatically."]}),"\n",(0,a.jsx)(n.h2,{id:"standardized-response",children:"Standardized Response"}),"\n",(0,a.jsx)(n.p,{children:"Each End Point will return a response in the same format:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\r\n  "message": "Human readable message",\r\n  "status": 200,\r\n  "success": true,\r\n  "data": {\r\n    // Anything goes here\r\n  },\r\n  "offset": null,\r\n  "limit": null,\r\n  "total": null,\r\n  "errors": []\r\n}\n'})}),"\n",(0,a.jsx)(n.admonition,{title:"Extended response",type:"tip",children:(0,a.jsx)(n.p,{children:"Depending on the installed modules the response might have additional fields but the core of it should stay the same"})}),"\n",(0,a.jsx)(n.h2,{id:"automatic-error-conversion",children:"Automatic error conversion"}),"\n",(0,a.jsxs)(n.p,{children:["When error occurs inside the ",(0,a.jsx)(n.code,{children:"space"})," routes it will be automatically converted into the standard response format, except\r\nfor Type Error, Memory Overflow Errors and similar. That means that Dullahan implements centralized error handling\r\narchitecture and if EP has been created inside ",(0,a.jsx)(n.code,{children:"space"}),"  namespace you don't have to worry about setting try-catch blocks\r\njust to convert your error to the response."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="/_/register"',children:'{\r\n  "message": "Registration attempt failed",\r\n  "status": 400,\r\n  "success": false,\r\n  "data": [],\r\n  "offset": null,\r\n  "limit": null,\r\n  "total": null,\r\n  // Errors can be either and array of strings\r\n  // or an graph with array of strings as the end node\r\n  "errors": {\r\n    "email": [\r\n      "User with this e-mail already exists"\r\n    ],\r\n    "username": [\r\n      "User with this name already exists"\r\n    ]\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"automatic-openapi-documentation",children:"Automatic OpenAPI documentation"}),"\n",(0,a.jsxs)(n.p,{children:["Each REST API EP is described using\r\n",(0,a.jsx)(n.a,{href:"https://symfony.com/bundles/NelmioApiDocBundle/current/index.html",children:"NelmioApiDoc Bundle"})," attributes and allows for\r\ninteractive API documentation using OpenAPI 3.0 standard. This means that you can access and browse all Dullahan EP by\r\nentering ",(0,a.jsx)(n.code,{children:"/api/doc"}),":"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"OpenApi",src:t(9909).A+"",width:"1920",height:"947"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},9909:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/openapi-a744f6c4cc2c49fbcc355daacc50c5e9.png"}}]);