"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[8802],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(6540);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}},9525:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"dullahan/README","title":"Intro","description":"Dullahan is modular, headless, Product Information and Digital Asset Management system, developed for accelerating","source":"@site/docs/dullahan/README.md","sourceDirName":"dullahan","slug":"/dullahan/","permalink":"/docs/dullahan/","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/dullahan/README.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Intro"},"sidebar":"tutorialSidebar","previous":{"title":"Dullahan","permalink":"/docs/category/dullahan"},"next":{"title":"Rest API","permalink":"/docs/dullahan/api"}}');var r=t(4848),o=t(8453);const s={sidebar_position:1,sidebar_label:"Intro"},i="Intro",l={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Quickstart",id:"quickstart",level:2},{value:"Architecture",id:"architecture",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"intro",children:"Intro"})}),"\n",(0,r.jsx)(n.p,{children:"Dullahan is modular, headless, Product Information and Digital Asset Management system, developed for accelerating\ndevelopment of centralized information management systems. Its main purpose is to give a strong foundation for managing\ndata and cut the development work to focus on business."}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.p,{children:["Dullahan is an ",(0,r.jsx)(n.a,{href:"https://symfony.com/",children:"Symfony"})," bundle which means any requirements of the Symfony are requirements of\nDullahan. You can easily check them ",(0,r.jsx)(n.a,{href:"https://symfony.com/doc/7.0/setup.html#technical-requirements",children:"here"}),". Symfony\nversion for those docs is 7.x."]}),"\n",(0,r.jsxs)(n.p,{children:["For a database Dullahan is using ",(0,r.jsx)(n.a,{href:"https://symfony.com/doc/7.0/doctrine.html",children:"Doctrine ORM"}),", so any databases that\nDoctrine has adapter for should work fine with Dullahan. The default is MySQL but other options include PostgreSQL or\nOracle."]}),"\n",(0,r.jsxs)(n.p,{children:["For PHP extensions not mentioned by ",(0,r.jsx)(n.code,{children:"Symfony"})," Dullahan may require ",(0,r.jsx)(n.code,{children:"bcmath"})," for JWT token generation depending on what\nencryption algorithm you will be using. Check pre-requisites\n",(0,r.jsx)(n.a,{href:"https://web-token.spomky-labs.com/introduction/pre-requisite",children:"here"})," for stateless JWT sessions."]}),"\n",(0,r.jsxs)(n.p,{children:["Additionally, Dullahan is using ",(0,r.jsx)(n.a,{href:"https://jackrabbit.apache.org/jcr/standalone-server.html",children:"Apache Jackrabbit Standalone"}),"\n(not Oak) for virtualizing and querying the files. For managing the configuration and client it uses\n",(0,r.jsx)(n.a,{href:"https://www.doctrine-project.org/projects/phpcr-odm.html",children:"Doctrine PHPCR"}),"\n(",(0,r.jsx)(n.a,{href:"https://github.com/doctrine/DoctrinePHPCRBundle",children:"Symfony integration"}),") which, underneath, uses\n",(0,r.jsx)(n.a,{href:"https://jackalope.github.io/",children:"Jackalope"})," library. This can be switched to native local system at any time but it's not\nas good. (for example you will be loosing WebDAV functionality)"]}),"\n",(0,r.jsx)(n.h2,{id:"quickstart",children:"Quickstart"}),"\n",(0,r.jsx)(n.p,{children:"To setup example project there is a prepared composer project with a simple docker compose setup:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"composer create-project mortimer333/dullahan-project my-project-name\n"})}),"\n",(0,r.jsxs)(n.p,{children:["After download, you have to either create your own ",(0,r.jsx)(n.code,{children:".env.local"})," file with required variables or rename ",(0,r.jsx)(n.code,{children:".env.example"}),"\nto ",(0,r.jsx)(n.code,{children:".env.local"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mv .env.example .env.local\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now you have to decide what will be this projects domain name or just leave the default ",(0,r.jsx)(n.code,{children:"dullahan.localhost"}),".\nYou can change it in ",(0,r.jsx)(n.code,{children:".docker/nginx.conf:9"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Having this ready we can start the containers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker compose up -d\n"})}),"\n",(0,r.jsx)(n.p,{children:"and after it all sets up, run the commands required to prepare database and jackrabbit definitions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker exec -it dullahan-php-fpm php bin/console d:m:m\ndocker exec -it dullahan-php-fpm php bin/console doctrine:phpcr:node-type:register ./vendor/mortimer333/dullahan/definitions/jackrabbit/ --allow-update\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now feel free to check the application out by accessing ",(0,r.jsx)(n.code,{children:"http://dullahan.localhost/api/doc"})," and investigating the\nendpoints definitions."]}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsxs)(n.p,{children:["Dullahan strives for maximum modularity and extendability. For that reason it has taken the page from microservice\narchitecture in a more micro scale and delegated all modules communication and actions to events using\n",(0,r.jsx)(n.a,{href:"https://symfony.com/doc/7.0/event_dispatcher.html",children:"Symfony Events"})," bundle. Each module action is not only precedes by\nan event but is actually happening on the event call. Thanks to that, all modules are completely\ndecoupled from each other and can be replaced or disabled. Also any action taken, can be caught and prevented or\nreplaced."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);