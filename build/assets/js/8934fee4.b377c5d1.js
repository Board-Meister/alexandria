"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[39],{6735:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"dullahan/entity/crud","title":"Entity API","description":"API for managing Entities is flexible enough to accommodate for most CRUD calls. The idea is to not create separate","source":"@site/docs/dullahan/entity/crud.md","sourceDirName":"dullahan/entity","slug":"/dullahan/entity/crud","permalink":"/docs/dullahan/entity/crud","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/dullahan/entity/crud.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Entity API"},"sidebar":"tutorialSidebar","previous":{"title":"Field Attribute","permalink":"/docs/dullahan/entity/field_attribute"},"next":{"title":"Events","permalink":"/docs/dullahan/entity/event"}}');var s=i(4848),l=i(8453);const a={sidebar_position:4,sidebar_label:"Entity API"},r="Entity API",o={},d=[{value:"Common parameters",id:"common-parameters",level:2},{value:"Retrieve list of entities",id:"retrieve-list-of-entities",level:2},{value:"Retrieve one entity",id:"retrieve-one-entity",level:2},{value:"Create entity",id:"create-entity",level:2},{value:"Update entity",id:"update-entity",level:2},{value:"Delete entity",id:"delete-entity",level:2},{value:"Retrieve bulk list of entities",id:"retrieve-bulk-list-of-entities",level:2},{value:"Bulk query parameter",id:"bulk-query-parameter",level:3},{value:"Data Set",id:"data-set",level:2},{value:"Meta fields",id:"meta-fields",level:3},{value:"<code>__max</code>",id:"__max",level:4},{value:"<code>__criteria</code>",id:"__criteria",level:4},{value:"Pagination",id:"pagination",level:2},{value:"limit",id:"limit",level:3},{value:"offset",id:"offset",level:3},{value:"sort",id:"sort",level:3},{value:"join",id:"join",level:3},{value:"filter",id:"filter",level:3},{value:"Connector",id:"connector",level:4},{value:"Compare",id:"compare",level:4},{value:"Simple compare",id:"simple-compare",level:5},{value:"Array compare",id:"array-compare",level:5},{value:"Between compare",id:"between-compare",level:5}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"entity-api",children:"Entity API"})}),"\n",(0,s.jsx)(n.p,{children:"API for managing Entities is flexible enough to accommodate for most CRUD calls. The idea is to not create separate\nfunctionality and have one flexible set of End Points for the Front End needs. Thanks to this we are avoiding\nAPI CRUD EP hell of creating separate action points for every action on our entities."}),"\n",(0,s.jsx)(n.admonition,{title:"Standard response",type:"tip",children:(0,s.jsxs)(n.p,{children:["Make sure that you are familiar with ",(0,s.jsx)(n.a,{href:"/docs/dullahan/api#standardized-response",children:"standard Dullahan response"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"We have:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("span",{style:{width:"200px",display:"inline-block"},children:"Entity list retrieval"})," ",(0,s.jsx)(n.code,{children:"GET /_/entity/list/{mapping}/{path}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("span",{style:{width:"200px",display:"inline-block"},children:"Single entity retrieval"})," ",(0,s.jsx)(n.code,{children:"GET /_/entity/get/{mapping}/{path}/{id}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("span",{style:{width:"200px",display:"inline-block"},children:"Entity creation"})," ",(0,s.jsx)(n.code,{children:"POST /_/user/entity/create/{mapping}/{path}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("span",{style:{width:"200px",display:"inline-block"},children:"Entity update"})," ",(0,s.jsx)(n.code,{children:"PUT /_/user/entity/update/{mapping}/{path}/{id}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("span",{style:{width:"200px",display:"inline-block"},children:"Entity removal"})," ",(0,s.jsx)(n.code,{children:"DELETE /_/user/entity/delete/{mapping}/{path}/{id}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("span",{style:{width:"200px",display:"inline-block"},children:"Bulk retrieval"})," ",(0,s.jsx)(n.code,{children:"GET /_/entity/bulk/{mapping}"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-parameters",children:"Common parameters"}),"\n",(0,s.jsx)(n.p,{children:"To not repeat to many times the same information we have few common parameters available in most of our routes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mapping"})," - Path parameter, defines which mapping service should use to resolve requested entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"path"})," - Path parameter, an actual path to the entity. Make sure that you don't accidentally add parts of the path defined in the mapping.\nFor example if we have an entity ",(0,s.jsx)(n.code,{children:"App\\Entity\\Nested\\Foo"})," with defined mapping ",(0,s.jsx)(n.code,{children:"main"})," to ",(0,s.jsx)(n.code,{children:"App\\Entity"})," then we would have to create\nroute like this ",(0,s.jsx)(n.code,{children:"/_/entity/list/main/Nested\\Foo"})," to list this resource"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"})," - Path parameter, a ID of object we want to access"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./crud#dataset",children:"Data Set"})," - Query parameter, similar to GraphQL, defines what fields service should return"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./crud#pagination",children:"Pagination"})," - Query parameter, defines a little more than pagination: filters, joins, sorting and pagination"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"retrieve-list-of-entities",children:"Retrieve list of entities"}),"\n",(0,s.jsxs)(n.p,{children:["To retrieve multiple entities from database we use ",(0,s.jsx)(n.code,{children:"/_/entity/list/{mapping}/{path}"})," EP. It accepts two arguments in the\npath and another two in the query."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:'GET http://dullahan.localhost/_/entity/list/main/Foo\nContent-Type: application/json\nAuthorization: ...\nX-CSRF-Token: ...\nAccept: application/json\n\n{\n  "dataSet": {\n    "id": 1,\n    "name": 1\n  },\n  "pagination": {\n    "limit": 10,\n    "offset": 0\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Will result in:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Entities retrieved successfully",\n  "success": true,\n  "status": 200,\n  "data": {\n    "entities": [\n      {\n        "id": 1,\n        "name": "John"\n      },\n      {\n        "id": 2,\n        "name": "Andrew"\n      },\n      {\n        "id": 3,\n        "name": null\n      }\n    ]\n  },\n  "limit": 10,\n  "offset": 0,\n  "total": 3,\n  "errors": []\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"retrieve-one-entity",children:"Retrieve one entity"}),"\n",(0,s.jsxs)(n.p,{children:["To retrieve single entity from database we use ",(0,s.jsx)(n.code,{children:"/_/entity/list/{mapping}/{path}/{id}"})," EP. It accepts three arguments in\nthe path and one in the query."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:'GET http://dullahan.localhost/_/entity/list/main/Foo/1\nContent-Type: application/json\nAuthorization: ...\nX-CSRF-Token: ...\nAccept: application/json\n\n{\n  "dataSet": {\n    "id": 1,\n    "name": 1\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Will result in:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Entity retrieved successfully",\n  "success": true,\n  "status": 200,\n  "data": {\n    "entity": {\n      "id": 1,\n      "name": "Andrew"\n    }\n  },\n  "limit": null,\n  "offset": null,\n  "total": null,\n  "errors": []\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"create-entity",children:"Create entity"}),"\n",(0,s.jsxs)(n.p,{children:["To create an entity we use ",(0,s.jsx)(n.code,{children:"/_/user/entity/create/{mapping}/{path}"})," EP. It accepts two arguments in\nthe path and another two in the body."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:'POST http://dullahan.localhost/_/user/entity/create/main/Foo\nContent-Type: application/json\nAuthorization: ...\nX-CSRF-Token: ...\nAccept: application/json\n\n{\n  "dataSet": {\n    "id": 1,\n    "name": 1\n  },\n  "entity": {\n    "name": "John"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Will result in:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Entity successfully created",\n  "success": true,\n  "status": 200,\n  "data": {\n    "entity": {\n        "id": 1,\n        "name": "John"\n    }\n  },\n  "limit": null,\n  "offset": null,\n  "total": null,\n  "errors": []\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"update-entity",children:"Update entity"}),"\n",(0,s.jsxs)(n.p,{children:["To update an entity we use ",(0,s.jsx)(n.code,{children:"/_/user/entity/update/{mapping}/{path}/{id}"})," EP. It accepts three arguments in\nthe path and two in the body."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:'PUT http://dullahan.localhost/_/user/entity/create/main/Foo/1\nContent-Type: application/json\nAuthorization: ...\nX-CSRF-Token: ...\nAccept: application/json\n\n{\n  "dataSet": {\n    "id": 1,\n    "name": 1\n  },\n  "entity": {\n    "name": "New John"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Will result in:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Entity successfully updated",\n  "success": true,\n  "status": 200,\n  "data": {\n    "entity": {\n        "id": 1,\n        "name": "New John"\n    }\n  },\n  "limit": null,\n  "offset": null,\n  "total": null,\n  "errors": []\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"delete-entity",children:"Delete entity"}),"\n",(0,s.jsxs)(n.p,{children:["To delete an entity we use ",(0,s.jsx)(n.code,{children:"/_/user/entity/update/{mapping}/{path}/{id}"})," EP. It accepts three arguments in\nthe path."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"DELETE http://dullahan.localhost/_/user/entity/create/main/Foo/1\nContent-Type: application/json\nAuthorization: ...\nX-CSRF-Token: ...\nAccept: application/json\n"})}),"\n",(0,s.jsx)(n.p,{children:"Will result in:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Entity successfully deleted",\n  "success": true,\n  "status": 200,\n  "data": [],\n  "limit": null,\n  "offset": null,\n  "total": null,\n  "errors": []\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"retrieve-bulk-list-of-entities",children:"Retrieve bulk list of entities"}),"\n",(0,s.jsxs)(n.p,{children:["To retrieve multiple different entities at once from database we use ",(0,s.jsx)(n.code,{children:"/_/entity/bulk/{mapping}"})," EP. It accepts one argument in the\npath and another one in the query."]}),"\n",(0,s.jsx)(n.h3,{id:"bulk-query-parameter",children:"Bulk query parameter"}),"\n",(0,s.jsx)(n.p,{children:"Bulk parameter is basically a nested set of Entity list retrievals. Its\na object with custom name as key (under which the results will appear),\nand value is an object made of three parameters: path, dataSet and pagination (path is required)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:'GET http://dullahan.localhost/_/entity/bulk/main\nContent-Type: application/json\nAuthorization: ...\nX-CSRF-Token: ...\nAccept: application/json\n\n{\n    "bulk": {\n        "FooList": {\n            "path": "Foo",\n            "dataSet": {\n                "name": 1\n            },\n            "pagination": {\n                "limit": 10,\n                "offset": 0\n            }\n        },\n        "BarList": {\n            "path": "Bar",\n            "dataSet": {\n                "author": 1\n            },\n            "pagination": {\n                "limit": 10,\n                "offset": 0\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Will result in:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Entities retrieved successfully",\n  "success": true,\n  "status": 200,\n  "data": {\n    "bulk": {\n      "FooList": {\n        "entities": [\n          {\n            "name": "John"\n          }\n        ],\n        "limit": 10,\n        "offset": 0,\n        "total": 1\n      },\n      "BarList": {\n        "entities": [\n          {\n            "author": "James Louise"\n          }\n        ],\n        "limit": 10,\n        "offset": 0,\n        "total": 1\n      }\n    }\n  },\n  "limit": null,\n  "offset": null,\n  "total": null,\n  "errors": []\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"data-set",children:"Data Set"}),"\n",(0,s.jsx)(n.p,{children:"Data Set is a JSON defining what fields should be included in the response. It works as a map with fields as keys and\nsome truthy value as values:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "author": 1,\n    "books": {\n        "id": 1,\n        "title": 1\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"With that you will be able to receive exactly what you need:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "author": "John William",\n        "books": [\n            {\n                "id": 231,\n                "title": "The wind"\n            },\n\n            {\n                "id": 345,\n                "title": "Great flood"\n            }\n        ]\n    },\n    {\n        "author": "Pawe\u0142 Szkie\u0142ko",\n        "books": []\n    }\n]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"meta-fields",children:"Meta fields"}),"\n",(0,s.jsxs)(n.p,{children:["DataSet accepts meta fields which are special fields starting with double floor ",(0,s.jsx)(n.code,{children:"__"}),":"]}),"\n",(0,s.jsx)(n.h4,{id:"__max",children:(0,s.jsx)(n.code,{children:"__max"})}),"\n",(0,s.jsx)(n.p,{children:"Available only in collections, makes it so not entire collection is retrieved but only up to the maximum:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "books": {\n        "__max": 1,\n        "id": 1,\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "books": [\n            {\n                "id": 231,\n            },\n        ]\n    },\n    {\n        "books": []\n    }\n]\n'})}),"\n",(0,s.jsx)(n.h4,{id:"__criteria",children:(0,s.jsx)(n.code,{children:"__criteria"})}),"\n",(0,s.jsx)(n.p,{children:"Available only in collections, sets additional simple filtering parameters that will narrow down the collection results:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "books": {\n        "__criteria": {\n            "eq": ["year", 1920]\n        },\n        "id": 1,\n        "year": 1\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "books": [\n            {\n                "id": 345,\n                "year": 1920\n            },\n        ]\n    }\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Available criteria:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Is equal: ",(0,s.jsx)(n.code,{children:'"eq": ["year", 1920]'})]}),"\n",(0,s.jsxs)(n.li,{children:["Greater then:  ",(0,s.jsx)(n.code,{children:'"gt": ["year", 1920]'})]}),"\n",(0,s.jsxs)(n.li,{children:["Lesser then: ",(0,s.jsx)(n.code,{children:'"lt": ["year", 1920]'})]}),"\n",(0,s.jsxs)(n.li,{children:["Greater or Equal: ",(0,s.jsx)(n.code,{children:'"gte": ["year", 1920]'})]}),"\n",(0,s.jsxs)(n.li,{children:["Lesser or Equal:  ",(0,s.jsx)(n.code,{children:'"lte": ["year", 1920]'})]}),"\n",(0,s.jsxs)(n.li,{children:["Not Equal:  ",(0,s.jsx)(n.code,{children:'"neq": ["year", 1920]'})]}),"\n",(0,s.jsxs)(n.li,{children:["Is Null: ",(0,s.jsx)(n.code,{children:'"isNull": ["year"]'})]}),"\n",(0,s.jsxs)(n.li,{children:["Is in:  ",(0,s.jsx)(n.code,{children:'"in": ["year", [1920]]'})]}),"\n",(0,s.jsxs)(n.li,{children:["Is not in: ",(0,s.jsx)(n.code,{children:'"notIn": ["year", [1920]]'})]}),"\n",(0,s.jsxs)(n.li,{children:["And: ",(0,s.jsx)(n.code,{children:'"andX": [{"gt": ["year", 1920]}, {"neq": ["year", 1925]}]'})]}),"\n",(0,s.jsxs)(n.li,{children:["Or: ",(0,s.jsx)(n.code,{children:'"orX": [{"isNull": ["year"]}, {"neq": ["year", 1925]}]'})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,s.jsx)(n.p,{children:"Although it is referred as a Pagination DTO it is a little more then just setting up page size and page number.\nOf course it defines the amount of results, but it also defines how output is sorted, additional\nfilters, column grouping, and even joins with other tables used for filtering."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "limit": 10,\n  "offset": 0,\n  "sort": [\n    {\n      "column": "id",\n      "direction": "ASC"\n    }\n  ],\n  "filter": [\n    ["column", "=", "value"],\n    "AND",\n    ["alias.column2", "!=", "value2"]\n  ],\n  "join": [\n    ["column", "alias"]\n  ],\n  "group": ["column"]\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"All fields optional",type:"tip",children:(0,s.jsx)(n.p,{children:"All fields in Pagination DTO are optional"})}),"\n",(0,s.jsx)(n.p,{children:"All of those options are bundled inside one object due to having impact on the amount and order or data we retrieve."}),"\n",(0,s.jsx)(n.h3,{id:"limit",children:"limit"}),"\n",(0,s.jsx)(n.p,{children:"An integer defining how many records to return at once."}),"\n",(0,s.jsx)(n.h3,{id:"offset",children:"offset"}),"\n",(0,s.jsx)(n.p,{children:"An integer defining from where to start counting records to return."}),"\n",(0,s.jsx)(n.h3,{id:"sort",children:"sort"}),"\n",(0,s.jsx)(n.p,{children:"An array of Sort DTO object defining the order of the results."}),"\n",(0,s.jsx)(n.p,{children:"Sort DTO is made of two properties:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"column - name of the column to sort by on"}),"\n",(0,s.jsxs)(n.li,{children:["direction - the direction of the sorting, it accepts two values ",(0,s.jsx)(n.code,{children:"ASC"})," which stands for ascending and ",(0,s.jsx)(n.code,{children:"DESC"})," which\nstands for descending"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "sort": [\n        {\n            "column": "id",\n            "direction": "ASC"\n        },\n        {\n            "column": "column",\n            "direction": "DESC"\n        }\n    ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"join",children:"join"}),"\n",(0,s.jsx)(n.p,{children:"An array allowing for setting up joins to another tables, the join must be defined in the Entity definition otherwise it will\nreturn an error. It is possible to define chained joins from already joined table to another and use those tables in the\nfilter property."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "join": [\n        ["column", "alias"],\n        ["alias.column2", "alias2"]\n    ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"filter",children:"filter"}),"\n",(0,s.jsx)(n.p,{children:"An array containing semi-SQL variation of strings and arrays. There are essentially 7 different types of possible values:"}),"\n",(0,s.jsx)(n.h4,{id:"connector",children:"Connector"}),"\n",(0,s.jsx)(n.p,{children:"Connector is a string that joins previous values or manages scope. We have 4 different types of connectors:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"AND"})," - joins left and right side of query where both sides have to be true"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"OR"})," - joins left and right side of query where at least one side has to be true"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"("})," - opens a scope useful when trying to combine ",(0,s.jsx)(n.code,{children:"AND"})," and ",(0,s.jsx)(n.code,{children:"OR"})," connectors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:")"})," - closes the scope"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"compare",children:"Compare"}),"\n",(0,s.jsx)(n.p,{children:"Compares define operations on the columns (e.g. is equal, is null etc.) which we have 3 types:"}),"\n",(0,s.jsx)(n.h5,{id:"simple-compare",children:"Simple compare"}),"\n",(0,s.jsx)(n.p,{children:"Simple compare is an array made of three segments. First is the column name (can be prefixed with alias if join is\ndefined), second is the operator and third is the value (either string or numeric)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "filter": [\n    ["column", "=", "value"]\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"We have 10 different operators available:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"!="})," - Is not equal"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"="})," - Is equal"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"IS"})," - Is something (useful when checking if column is NULL)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"IS NOT"})," - Is not something (useful when checking if column is not NULL)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<"})," - Is lesser"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:">"})," - Is greater"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<>"})," - Is not the same"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:">="})," - Is lesser or equal"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<="})," - Is greater or equal"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"LIKE"})," - Like operator, is similar"]}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"array-compare",children:"Array compare"}),"\n",(0,s.jsxs)(n.p,{children:["Array compare is structurally very similar to Simple compare.\nThe only difference is that is accepts an array of values third parameter and requires the second parameter (operator)\nto be ",(0,s.jsx)(n.code,{children:"IN"})," or ",(0,s.jsx)(n.code,{children:"NOT IN"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "filter": [\n    ["column", "NOT IN", [1,2,3]]\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h5,{id:"between-compare",children:"Between compare"}),"\n",(0,s.jsxs)(n.p,{children:["Between compare is special because it has 5 segments. First is column name, second must be ",(0,s.jsx)(n.code,{children:"BETWEEN"}),", third first value,\nfourth must be ",(0,s.jsx)(n.code,{children:"AND"})," and last one is the second value. Each value must be a string."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "filter": [\n    ["column", "BETWEEN", "2020-01-01", "AND", "2021-01-01"]\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"With this we can build quite the query and cover most of the common cases."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "filter": [\n    "(", ["column", "!=", "value"], "AND", ["column2", ">=", "value2"], ")",\n    "OR", ["column3", "BETWEEN", "2020-01-01", "AND", "2021-01-01"]\n  ]\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var t=i(6540);const s={},l=t.createContext(s);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);