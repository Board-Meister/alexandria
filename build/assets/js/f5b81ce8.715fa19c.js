"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[7581],{8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var a=r(6540);const t={},s=a.createContext(t);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},8812:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"dullahan/asset/programatically_manage","title":"Manage interfaces","description":"For programmatic use of the Asset Bundle we have set few interfaces:","source":"@site/docs/dullahan/asset/programatically_manage.md","sourceDirName":"dullahan/asset","slug":"/dullahan/asset/programatically_manage","permalink":"/docs/dullahan/asset/programatically_manage","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/dullahan/asset/programatically_manage.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Manage interfaces"},"sidebar":"tutorialSidebar","previous":{"title":"Asset API","permalink":"/docs/dullahan/asset/crud"},"next":{"title":"Entity integration","permalink":"/docs/dullahan/asset/entity_integration"}}');var t=r(4848),s=r(8453);const i={sidebar_position:3,sidebar_label:"Manage interfaces"},l="Manage interfaces",c={},o=[{value:"Asset aggregate",id:"asset-aggregate",level:2},{value:"Create new asset",id:"create-new-asset",level:2},{value:"Create new folder",id:"create-new-folder",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"manage-interfaces",children:"Manage interfaces"})}),"\n",(0,t.jsx)(n.p,{children:"For programmatic use of the Asset Bundle we have set few interfaces:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"AssetServiceInterface"}),"\n",(0,t.jsx)(n.li,{children:"AssetSerializerInterface"}),"\n",(0,t.jsx)(n.li,{children:"AssetFileManagerInterface"}),"\n",(0,t.jsx)(n.li,{children:"AssetMiddlewareInterface"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["and ",(0,t.jsx)(n.code,{children:"Asset"})," aggregator you can use to manage most actions."]}),"\n",(0,t.jsx)(n.p,{children:"They give the needed abstraction for managing your assets."}),"\n",(0,t.jsx)(n.h2,{id:"asset-aggregate",children:"Asset aggregate"}),"\n",(0,t.jsx)(n.p,{children:"Asset aggregate is made from three object:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Structure - defines information about the asset like path, name, type"}),"\n",(0,t.jsx)(n.li,{children:"Entity - the actual object representing information in database"}),"\n",(0,t.jsx)(n.li,{children:"Context - additional necessary information"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"create-new-asset",children:"Create new asset"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Dullahan\\Asset\\Port\\Presentation\\AssetServiceInterface;\r\nuse Dullahan\\Asset\\Domain\\File;\r\nuse Dullahan\\Asset\\Domain\\Asset;\r\nuse Dullahan\\Asset\\Port\\Presentation\\AssetMiddlewareInterface;\r\n\r\n/**\r\n * @phpstan-import-type AssetSerialized from \\Dullahan\\Asset\\Port\\Presentation\\AssetSerializerInterface\r\n */\r\nclass CreateAssetExample {\r\n    public function __construct(\r\n        private AssetServiceInterface $assetService,\r\n        private AssetMiddlewareInterface $assetMiddleware,\r\n    ) {\r\n    }\r\n\r\n    public function uploadAsset(): Asset\r\n    {\r\n        $filepath = '/path/to/resource.png';\r\n        $file = new File(\r\n            path: '/example',\r\n            name: 'new_image',\r\n            originalName: 'example',\r\n            resource: fopen(filepath),\r\n            size: (int) filesize(filepath),\r\n            extension: 'png',\r\n            mimeType: 'image/png',\r\n        );\r\n\r\n        $asset = $this->assetService->create($file);\r\n        $this->assetService->flush();\r\n\r\n        return asset;\r\n    }\r\n\r\n    /**\r\n     * @return AssetSerialized\r\n     */\r\n    public function uploadAssetUsingMiddleware(): array\r\n    {\r\n        return $this->assetMiddleware->upload(\r\n            name: 'new_image',\r\n            path: '/example',\r\n            resource: fopen(filepath),\r\n            originalName: 'example',\r\n            size: (int) filesize(filepath),\r\n            extension: 'png',\r\n            mimeType: 'image/png',\r\n        );\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"create-new-folder",children:"Create new folder"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Dullahan\\Asset\\Domain\\Directory;\r\nuse Dullahan\\Asset\\Port\\Presentation\\AssetServiceInterface;\r\nuse Dullahan\\Asset\\Domain\\Asset;\r\nuse Dullahan\\Asset\\Port\\Presentation\\AssetMiddlewareInterface;\r\n\r\nclass CreateFolderExample {\r\n    public function __construct(\r\n        private AssetServiceInterface $assetService,\r\n        private AssetMiddlewareInterface $assetMiddleware,\r\n    ) {\r\n    }\r\n\r\n    public function createFolder(): Asset\r\n    {\r\n        $asset = $this->assetService->create(new Directory('/newFolder'));\r\n        $this->assetService->flush();\r\n\r\n        return asset;\r\n    }\r\n\r\n    /**\r\n     * @return AssetSerialized\r\n     */\r\n    public function createFolderUsingMiddleware(): array\r\n    {\r\n        return $this->assetMiddleware->folder('/', 'newFolder'),\r\n    }\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);