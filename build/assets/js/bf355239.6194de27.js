"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[5426],{6433:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"dullahan/entity/programatically_manage","title":"Manage interfaces","description":"For programmatic use of the Entity Bundle we have set few interfaces:","source":"@site/docs/dullahan/entity/programatically_manage.md","sourceDirName":"dullahan/entity","slug":"/dullahan/entity/programatically_manage","permalink":"/docs/dullahan/entity/programatically_manage","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/dullahan/entity/programatically_manage.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"sidebar_label":"Manage interfaces"},"sidebar":"tutorialSidebar","previous":{"title":"Events","permalink":"/docs/dullahan/entity/event"},"next":{"title":"Serialization & Caching","permalink":"/docs/dullahan/entity/serialization_caching"}}');var a=t(4848),r=t(8453);const o={sidebar_position:6,sidebar_label:"Manage interfaces"},l="Manage interfaces",s={},c=[{value:"Retrieve and serialize Entity",id:"retrieve-and-serialize-entity",level:2},{value:"Get entity definition without entity",id:"get-entity-definition-without-entity",level:2},{value:"Create new entity and then update it",id:"create-new-entity-and-then-update-it",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"manage-interfaces",children:"Manage interfaces"})}),"\n",(0,a.jsx)(n.p,{children:"For programmatic use of the Entity Bundle we have set few interfaces:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"EntityCacheManagerInterface"}),"\n",(0,a.jsx)(n.li,{children:"EntityDefinitionManagerInterface"}),"\n",(0,a.jsx)(n.li,{children:"EntityPersistManagerInterface"}),"\n",(0,a.jsx)(n.li,{children:"EntityRetrievalManagerInterface"}),"\n",(0,a.jsx)(n.li,{children:"EntitySerializerInterface"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The actual implementation is a Facade for dispatching required events to achieve specific action."}),"\n",(0,a.jsx)(n.p,{children:"Here are few guides:"}),"\n",(0,a.jsx)(n.h2,{id:"retrieve-and-serialize-entity",children:"Retrieve and serialize Entity"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:'class RetrieveAndSerializeExample {\n    public function __construct(\n        private EntityRetrievalManagerInterface $entityRetrievalManager,\n        private EntitySerializerInterface $entitySerializer,\n    ) {\n    }\n\n    public function retrieveAndSerializeFoo(int $id): array\n    {\n        $entity = $this->entityRetrievalManager->get(Foo::class, $id);\n        if (!$entity) {\n            throw new \\Exception(\'Foo not found\', 404);\n        }\n\n        return $this->entitySerializer->serialize($entity, dataSet: [\n            "id" => 1,\n            "name" => 1,\n        ]);\n    }\n}\n'})}),"\n",(0,a.jsx)(n.admonition,{title:"Verification",type:"info",children:(0,a.jsxs)(n.p,{children:["Implementation of manage interfaces always implement whole flow, including user access verification. So, if you are\nlooking for admin like entity retrieval consider adding verification pass to the flow allowing just that or use events\nexplicitly like ",(0,a.jsx)(n.code,{children:"EntityGet"})]})}),"\n",(0,a.jsx)(n.h2,{id:"get-entity-definition-without-entity",children:"Get entity definition without entity"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"class GetEntityDefinitionWithoutEntityExample {\n    public function __construct(\n        private EntityDefinitionManagerInterface $entityDefinitionManager,\n    ) {\n    }\n\n    public function getFooDefinition(): ?array\n    {\n        $entity = new Foo(); // Just create the entity if possible\n        // Or create new instance without constructor via reflection\n        $reflection = new \\ReflectionClass(Foo::class);\n        $entity = $reflection->newInstanceWithoutConstructor();\n\n        return $this->entityDefinitionManager->getEntityDefinition(entity);\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"create-new-entity-and-then-update-it",children:"Create new entity and then update it"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:'class CreateEntityExample {\n    public function __construct(\n        private EntityPersistManagerInterface $entityPersistManager,\n    ) {\n    }\n\n    public function createNewFoo(): Foo\n    {\n        return $this->entityPersistManager->create(Foo::class, [\n            "name" => "Example",\n        ]);\n    }\n\n    public function updateFoo(int $id): Foo\n    {\n        return $this->entityPersistManager->create(Foo::class, $id, [\n            "name" => "Updated Example",\n        ]);\n    }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(6540);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);