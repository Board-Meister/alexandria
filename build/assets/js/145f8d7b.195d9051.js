"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[226],{5235:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"marshal/scope/aliasing","title":"Aliasing","description":"When using scoped global variables it might be inconvenient to use them over the old way. We have to add additional","source":"@site/docs/marshal/scope/aliasing.md","sourceDirName":"marshal/scope","slug":"/marshal/scope/aliasing","permalink":"/docs/marshal/scope/aliasing","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/marshal/scope/aliasing.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Aliasing"},"sidebar":"tutorialSidebar","previous":{"title":"Creating scope","permalink":"/docs/marshal/scope/"},"next":{"title":"Obscure libraries","permalink":"/docs/marshal/scope/obscure"}}');var o=n(4848),s=n(8453);const r={sidebar_position:2,sidebar_label:"Aliasing"},i="Aliasing",l={},c=[{value:"Easy to use hard to maintain",id:"easy-to-use-hard-to-maintain",level:2},{value:"Tips on creating alias map",id:"tips-on-creating-alias-map",level:2}];function d(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"aliasing",children:"Aliasing"})}),"\n",(0,o.jsx)(t.p,{children:"When using scoped global variables it might be inconvenient to use them over the old way. We have to add additional\nline to tell TS about each new global variable and actually have two names for each of them."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="plugin.ts"',children:"// We have to define this import as just definition import otherwise we will be including\n// whole copy of styled-components library even if we are not using it (and all its dependencies)\nimport type styledComponents from 'styled-components'   // !!! Additional name !!!\n\n// We have to declare this variable in each file otherwise Typescript validator will throw an exception\n// regarding using non existing variable\ndeclare const styled: typeof styledComponents;          // !!! Additional line !!!\n\n// And finally we can use the library without getting errors from TS\nconst Div = styled.div`\n    background-color: red;\n`\n"})}),"\n",(0,o.jsxs)(t.p,{children:["A way to overcome this DX issue is to tell your bundler about global variable. This can be done in a lot different ways\nper each bundler but to have concrete example we will focus on ",(0,o.jsx)(t.code,{children:"esbuild"})," as our main bundler."]}),"\n",(0,o.jsxs)(t.p,{children:["Even though ",(0,o.jsx)(t.code,{children:"esbuild"})," has its own properties to allow for such endeavors like ",(0,o.jsx)(t.code,{children:"external"})," or ",(0,o.jsx)(t.code,{children:"alias"})," I found them\nsomewhat lacking and settled for an alias plugin ",(0,o.jsx)(t.code,{children:"esbuild-plugin-path-alias"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"npm i -D esbuild-plugin-path-alias\n"})}),"\n",(0,o.jsxs)(t.p,{children:["With this installed we can easily alias any package however we want. Lets create a aliasing file for the\n",(0,o.jsx)(t.code,{children:"styled-components"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="styled-components.alias.ts"',children:'import type Styled from "styled-components";\n\ndeclare const styled: typeof Styled;\n\nexport default styled;\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Notice how similar this is to what we did in ",(0,o.jsx)(t.code,{children:"plugin.ts"}),". We just moved this repeating definition into one place which\nwill tell our bundler how to understand all our usages of this library."]}),"\n",(0,o.jsxs)(t.p,{children:["But what exactly is happening here? In this file we specified the name of the global variable ",(0,o.jsx)(t.code,{children:"styled"}),", what are its\ncontents (",(0,o.jsx)(t.code,{children:"styled-components"}),") and how it is exported (",(0,o.jsx)(t.code,{children:"default"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["With this we can use our plugin to specify how ",(0,o.jsx)(t.code,{children:"styled-components"})," should be resolved during bundling."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="esbuild.config.mjs"',children:"import aliasPlugin from 'esbuild-plugin-path-alias';\n\naliasPlugin({\n    'styled-components': '/absolute/path/styled.alias',\n}),\n"})}),"\n",(0,o.jsx)(t.p,{children:"With this in place we can come back to our old habits:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="plugin.ts"',children:"import styled from 'styled-components'\n\nconst Div = styled.div`\n    background-color: red;\n"})}),"\n",(0,o.jsx)(t.p,{children:"and stop worrying about duplicating this library."}),"\n",(0,o.jsx)(t.admonition,{title:"Do not create additional alias maps",type:"warning",children:(0,o.jsx)(t.p,{children:"If you are not a creator of related scope plugin it is highly possible for them to have already prepared aliasing file\nready for you to use. Check out their library for such files and do not burden yourself unnecessarily."})}),"\n",(0,o.jsx)(t.h2,{id:"easy-to-use-hard-to-maintain",children:"Easy to use hard to maintain"}),"\n",(0,o.jsx)(t.p,{children:"For better experience library creators export their work in few different ways to make our life easier. If you want to\ncreate a proper alias map you have to completely mimic their way of exporting. Lets take for example React library,\nit does not only export React but also each of its methods separately, so we can write:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import { useState } from 'react'\nconst [loading, setLoading] = useState(false);\n"})}),"\n",(0,o.jsx)(t.p,{children:"instead of"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import React from 'react'\n\nconst { useState } = React;\nconst [loading, setLoading] = useState(false);\n"})}),"\n",(0,o.jsx)(t.p,{children:"because of that we have to mimic their way of exporting to the letter. Here is a working example of export for\nReact 18.3.1:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="react.alias.ts"',children:"import type React from 'react';\n\ndeclare const react: typeof React;\n\nexport const Children = react.Children\nexport const Component = react.Component\nexport const Fragment = react.Fragment\nexport const Profiler = react.Profiler\nexport const PureComponent = react.PureComponent\nexport const StrictMode = react.StrictMode\nexport const Suspense = react.Suspense\nexport const cloneElement = react.cloneElement\nexport const createContext = react.createContext\nexport const createElement = react.createElement\nexport const createFactory = react.createFactory\nexport const createRef = react.createRef\nexport const forwardRef = react.forwardRef\nexport const isValidElement = react.isValidElement\nexport const lazy = react.lazy\nexport const memo = react.memo\nexport const startTransition = react.startTransition\nexport const useCallback = react.useCallback\nexport const useContext = react.useContext\nexport const useDebugValue = react.useDebugValue\nexport const useDeferredValue = react.useDeferredValue\nexport const useEffect = react.useEffect\nexport const useId = react.useId\nexport const useImperativeHandle = react.useImperativeHandle\nexport const useInsertionEffect = react.useInsertionEffect\nexport const useLayoutEffect = react.useLayoutEffect\nexport const useMemo = react.useMemo\nexport const useReducer = react.useReducer\nexport const useRef = react.useRef\nexport const useState = react.useState\nexport const useSyncExternalStore = react.useSyncExternalStore\nexport const useTransition = react.useTransition\nexport const version = react.version\n// @ts-expect-error TS2339: Property does not exist\nexport const unstable_act = react.unstable_act\n// @ts-expect-error TS2339: Property does not exist\nexport const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n\nexport default react;\n"})}),"\n",(0,o.jsx)(t.p,{children:"Notice how we have two exports that TS does not know about but are actually required for libraries like React DOM to\nwork."}),"\n",(0,o.jsx)(t.p,{children:"Notice how big of export map it is and its not the biggest one up there - hence the tip:"}),"\n",(0,o.jsx)(t.admonition,{title:"Maybe it is not worth it",type:"tip",children:(0,o.jsx)(t.p,{children:"If your plugin uses the global variable once or twice it might not be worth the effort to create such map. There are\neven cases where using the map actually increased the size of the application."})}),"\n",(0,o.jsx)(t.h2,{id:"tips-on-creating-alias-map",children:"Tips on creating alias map"}),"\n",(0,o.jsx)(t.p,{children:"If you decided after careful consideration that your benefits are big enough, here are some tips for creating maps of\nsuch size:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Always export whole library as a default, it can't hurt."}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"To get real export (without TS exclusive exports like Interfaces, declarations etc.) just log it to the console. It\ncan't get more real then actual object in browser. Here is a function to create such map from logged variable:"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"function createAliasMap(variable, vName) {\n    return Object.keys(variable)\n        .reduce((a, c) => `${a}export const ${c} = ${vName}.${c};\\n`, '')\n    ;\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(6540);const o={},s=a.createContext(o);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);