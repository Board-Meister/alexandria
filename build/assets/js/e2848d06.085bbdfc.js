"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[9028],{1052:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"dullahan/entity/first_object","title":"Your first Entity","description":"Creating entity requires a few things to start:","source":"@site/docs/dullahan/entity/first_object.md","sourceDirName":"dullahan/entity","slug":"/dullahan/entity/first_object","permalink":"/docs/dullahan/entity/first_object","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/dullahan/entity/first_object.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"First Entity"},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/docs/dullahan/entity/"},"next":{"title":"Field Attribute","permalink":"/docs/dullahan/entity/field_attribute"}}');var a=t(4848),i=t(8453);const s={sidebar_position:2,sidebar_label:"First Entity"},l="Your first Entity",o={},d=[{value:"Validation",id:"validation",level:2},{value:"Ownership",id:"ownership",level:2},{value:"Ownerless",id:"ownerless",level:3},{value:"Owned",id:"owned",level:3},{value:"Transferable",id:"transferable",level:3},{value:"Custom",id:"custom",level:3}];function c(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"your-first-entity",children:"Your first Entity"})}),"\n",(0,a.jsx)(e.p,{children:"Creating entity requires a few things to start:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["defined mapping in your ",(0,a.jsx)(e.code,{children:"dullahan_entity"})," config"]}),"\n",(0,a.jsx)(e.li,{children:"Ready to use class with defined fields (preferably corresponding to columns)"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"To fulfill the first requirement we will add new mapping to our Symfony config for Dullahan Entity Bundle:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",metastring:'title="config/dullahan_entity.yaml"',children:"dullahan_entity:\r\n  mappings:\r\n    main:\r\n      prefix: App\\Entity\n"})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["Thanks to this Dullahan Entity mappers know where to look when using API calls to manage our entities. It is not\r\nnecessary if you aren't using the ",(0,a.jsx)(e.a,{href:"/docs/dullahan/entity/crud",children:"Entity API"}),"."]})}),"\n",(0,a.jsxs)(e.p,{children:["For the purpose of this explanation, I'm going to use entity generated by\r\n",(0,a.jsx)(e.a,{href:"https://symfony.com/bundles/SymfonyMakerBundle/current/index.html",children:"Maker Bundle"})," representing table for saving\r\ninformation about a simple blog post."]}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["This guide won't explain anything related Doctrine Bundle as this is just an example how we can combine table\r\ndefinitions with actual data manipulation and validation. If this example is hard to grasp have a read about\r\n",(0,a.jsx)(e.a,{href:"https://symfony.com/doc/current/doctrine.html",children:"Doctrine ORM"}),"."]})}),"\n",(0,a.jsxs)(e.p,{children:["The blog post will be made from identification number, author name, actual post content and secret content (private\r\ninformation about the blog like next version). To create it we will use Symfony command ",(0,a.jsx)(e.code,{children:"make:entity"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-shell",children:"php bin/console make:entity Post\n"})}),"\n",(0,a.jsx)(e.p,{children:"This command will prompt us for required fields (author, content and secretContent), generate entity and repository file based on our answers. Here is our generated entity file which uses Doctrine mappings:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",metastring:'title="src/Entity/Post.php"',children:"namespace App\\Entity;\r\n\r\nuse App\\Repository\\PostRepository;\r\nuse Doctrine\\DBAL\\Types\\Types;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\n\r\n#[ORM\\Entity(repositoryClass: PostRepository::class)]\r\nclass Post\r\n{\r\n    #[ORM\\Id]\r\n    #[ORM\\GeneratedValue]\r\n    #[ORM\\Column]\r\n    private ?int $id = null;\r\n\r\n    #[ORM\\Column(length: 255)]\r\n    private ?string $author = null;\r\n\r\n    #[ORM\\Column(type: Types::TEXT)]\r\n    private ?string $content = null;\r\n\r\n    #[ORM\\Column(type: Types::TEXT, nullable: true)]\r\n    private ?string $secretContent = null;\r\n\r\n    // For now we are skipping getters and setters but they are required!\n"})}),"\n",(0,a.jsx)(e.p,{children:"Now let's add our attributes to make this a Dullahan managed entity:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",metastring:'title="src/Entity/Post.php"',children:"use App\\Constraint\\PostConstraint;                              // New!\r\nuse Dullahan\\Entity\\Domain\\Attribute as Dullahan;               // New!\r\nuse Dullahan\\Entity\\Port\\Domain\\OwnerlessManageableInterface;   // New!\r\n\r\n#[ORM\\Entity(repositoryClass: PostRepository::class)]\r\n#[Dullahan\\Entity(PostConstraint::class)]                       // New!\r\nclass Post implements OwnerlessManageableInterface              // New!\r\n{\r\n    #[Dullahan\\Field]                                           // New!\r\n    #[ORM\\Id]\r\n    #[ORM\\GeneratedValue]\r\n    #[ORM\\Column]\r\n    private ?int $id = null;\r\n\r\n    #[Dullahan\\Field]                                           // New!\r\n    #[ORM\\Column(length: 255)]\r\n    private ?string $author = null;\r\n\r\n    #[Dullahan\\Field]                                           // New!\r\n    #[ORM\\Column(type: Types::TEXT)]\r\n    private ?string $content = null;\r\n\r\n    #[ORM\\Column(type: Types::TEXT, nullable: true)]\r\n    private ?string $secretContent = null;\n"})}),"\n",(0,a.jsx)(e.admonition,{title:"Getters and Setters",type:"warning",children:(0,a.jsx)(e.p,{children:"Each field is required to have specific getter and setter for system to work properly. We are just skipping them\r\nto make this example a little more compact and easier to wrap your head around but don't forget to add them!"})}),"\n",(0,a.jsx)(e.p,{children:"At the example above we where able to define table structure using Doctrine library, mark specific fields as\r\npublic/manageable, specify class responsible for validation and ownership strategy of the entity."}),"\n",(0,a.jsx)(e.admonition,{title:"$secretContent",type:"info",children:(0,a.jsxs)(e.p,{children:["The field ",(0,a.jsx)(e.code,{children:"$secretContent"})," was specifically not marked with ",(0,a.jsx)(e.code,{children:"Dullahan\\Field"})," attribute, as we don't want it to be manageable by the user."]})}),"\n",(0,a.jsxs)(e.p,{children:["Now we just need validation class ",(0,a.jsx)(e.code,{children:"App\\Constraint\\PostConstraint"}),", for example you can see ",(0,a.jsx)(e.a,{href:"/docs/dullahan/entity/first_object#validation",children:"this"}),"."]}),"\n",(0,a.jsx)(e.p,{children:"The entity is finished and ready to be managed via API calls. If you want to have a deeper understanding keep reading!"}),"\n",(0,a.jsx)(e.h2,{id:"validation",children:"Validation"}),"\n",(0,a.jsx)(e.p,{children:"When creating your own Manageable Entity you have to define validation constraints for the creation and update. This information is required when marking the class as Dullahan Entity as you can see in the example above."}),"\n",(0,a.jsxs)(e.p,{children:["The validation class must implement ",(0,a.jsx)(e.code,{children:"EntityValidateConstraintInterface"})," and follow its specifications. Here is an example for the Post entity:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"namespace App\\Constraint;\r\n\r\nuse Dullahan\\Entity\\Port\\Domain\\ConstraintInheritanceAwareInterface;\r\nuse Dullahan\\Entity\\Port\\Domain\\EntityValidateConstraintInterface;\r\nuse Dullahan\\Main\\Service\\Util\\ConstraintUtilService;\r\nuse Symfony\\Component\\Validator\\Constraints as Assert;\r\nuse Symfony\\Component\\Validator\\Constraint;\r\n\r\nclass PostConstraint implements EntityValidateConstraintInterface\r\n{\r\n    public static function create(): Assert\\Collection\r\n    {\r\n        return new Assert\\Collection(self::getConstraint());\r\n    }\r\n\r\n    public static function update(): Assert\\Collection\r\n    {\r\n        return new Assert\\Collection(ConstraintUtilService::constraintToOptional(self::getConstraint()));\r\n    }\r\n\r\n    /**\r\n     * @return array<string, array<Constraint>>\r\n     */\r\n    protected static function getConstraint(): array\r\n    {\r\n        return [\r\n            'author' => [\r\n                new Assert\\NotBlank(['message' => 'Missing author\\'s name']),\r\n                new Assert\\Type([\r\n                    'type' => 'string',\r\n                    'message' => 'Author must be a string',\r\n                ]),\r\n            ],\r\n            'content' => [\r\n                new Assert\\NotBlank(['message' => 'Missing content']),\r\n                new Assert\\Type([\r\n                    'type' => 'string',\r\n                    'message' => 'Content must be a string',\r\n                ]),\r\n            ],\r\n        ];\r\n    }\r\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["As you can see there are two types on validations: ",(0,a.jsx)(e.code,{children:"create"})," and ",(0,a.jsx)(e.code,{children:"update"}),". For creating a Post we are requiring all possible fields but for update all of them are optional - allowing for partial updates. It is for you to decide what must be provided and when."]}),"\n",(0,a.jsxs)(e.admonition,{type:"tip",children:[(0,a.jsx)(e.mdxAdmonitionTitle,{children:(0,a.jsx)(e.code,{children:"ConstraintUtilService::constraintToOptional"})}),(0,a.jsxs)(e.p,{children:["A helper method for converting a constraint ",(0,a.jsx)(e.code,{children:"Collection"})," to only optional fields. Thanks to it, you don't have to define the same field set twice."]})]}),"\n",(0,a.jsx)(e.h2,{id:"ownership",children:"Ownership"}),"\n",(0,a.jsx)(e.p,{children:"There are currently three ownership strategies:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"ownerless - any logged user can manage this entity - useful for centralized data services where everyone works on the\r\nsame data"}),"\n",(0,a.jsx)(e.li,{children:"owned - only assigned user can manage this entity"}),"\n",(0,a.jsx)(e.li,{children:"transferable - entity verifies itself via defined method if passed user can manage it"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"To mark entity to be handled by specific strategy we use interfaces:"}),"\n",(0,a.jsx)(e.h3,{id:"ownerless",children:"Ownerless"}),"\n",(0,a.jsxs)(e.p,{children:["As shown on the example above we are using ",(0,a.jsx)(e.code,{children:"OwnerlessManageableInterface"})," to mark this entity as free to manage\r\nby everyone:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",metastring:'title="Minimal Ownerless Example"',children:"use Dullahan\\Entity\\Domain\\Attribute as Dullahan;\r\nuse Dullahan\\Entity\\Port\\Domain\\OwnerlessManageableInterface;\r\n\r\n#[ORM\\Entity(repositoryClass: PostRepository::class)]\r\n#[Dullahan\\Entity(PostConstraint::class)]\r\nclass Post implements OwnerlessManageableInterface\r\n{\r\n    #[Dullahan\\Field, ORM\\Id, ORM\\GeneratedValue, ORM\\Column]\r\n    private ?int $id = null;\r\n\r\n    // Must implement `getId` method!\r\n    public function getId(): ?int\r\n    {\r\n        return $this->id;\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"owned",children:"Owned"}),"\n",(0,a.jsxs)(e.p,{children:["For entity to have an owner it must implement ",(0,a.jsx)(e.code,{children:"ManageableInterface"})," and User Bundle must be loaded:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",metastring:'title="Minimal Owner Example"',children:"use Dullahan\\Entity\\Domain\\Attribute as Dullahan;\r\nuse Dullahan\\Entity\\Port\\Domain\\ManageableInterface;\r\nuse Dullahan\\User\\Domain\\Entity\\UserData;\r\n\r\n#[ORM\\Entity(repositoryClass: PostRepository::class)]\r\n#[Dullahan\\Entity(PostConstraint::class)]\r\nclass Post implements ManageableInterface\r\n{\r\n    #[Dullahan\\Field, ORM\\Id, ORM\\GeneratedValue, ORM\\Column]\r\n    private ?int $id = null;\r\n\r\n    #[Dullahan\\Field, ORM\\ManyToOne, ORM\\JoinColumn(nullable: false)]\r\n    private ?UserData $userData = null;\r\n\r\n    public function getId(): ?int\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    public function getUser(): ?User\r\n    {\r\n        return $this->userData?->getUser();\r\n    }\r\n\r\n    public function setUser(?User $user): self\r\n    {\r\n        $this->userData = $user?->getData();\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function isOwner(User $user): bool\r\n    {\r\n        if (!$this->getUser()?->getId() || !$user->getId()) {\r\n            return false;\r\n        }\r\n\r\n        return $this->getUser()->getId() === $user->getId();\r\n    }\r\n\r\n    public function setOwner(User $user): self\r\n    {\r\n        $this->setUser($user);\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getUserData(): ?UserData\r\n    {\r\n        return $this->userData;\r\n    }\r\n\r\n    public function setUserData(?UserData $userData): static\r\n    {\r\n        $this->userData = $userData;\r\n\r\n        return $this;\r\n    }\r\n\r\n}\n"})}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsxs)(e.p,{children:["As QOL for this bundle, it comes with a helper trait ",(0,a.jsx)(e.code,{children:"UserDataRelationTrait"})," to make defining manageable entities\r\neasier."]})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",metastring:'title="Minimal Owner Example with UserDataRelationTrait"',children:"use Dullahan\\Entity\\Domain\\Attribute as Dullahan;\r\nuse Dullahan\\Entity\\Port\\Domain\\ManageableInterface;\r\nuse Dullahan\\User\\Domain\\Entity\\UserData;\r\nuse Dullahan\\User\\Domain\\Trait\\UserDataRelationTrait;\r\n\r\n#[ORM\\Entity(repositoryClass: PostRepository::class)]\r\n#[Dullahan\\Entity(PostConstraint::class)]\r\nclass Post implements ManageableInterface\r\n{\r\n    use UserDataRelationTrait;\r\n\r\n    #[Dullahan\\Field, ORM\\Id, ORM\\GeneratedValue, ORM\\Column]\r\n    private ?int $id = null;\r\n\r\n    #[Dullahan\\Field, ORM\\ManyToOne, ORM\\JoinColumn(nullable: false)]\r\n    private ?UserData $userData = null;\r\n\r\n    public function getId(): ?int\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    public function getUserData(): ?UserData\r\n    {\r\n        return $this->userData;\r\n    }\r\n\r\n    public function setUserData(?UserData $userData): static\r\n    {\r\n        $this->userData = $userData;\r\n\r\n        return $this;\r\n    }\r\n\r\n}\n"})}),"\n",(0,a.jsx)(e.admonition,{title:"Using user_data table",type:"info",children:(0,a.jsxs)(e.p,{children:["As defined in the User Bundle guide when creating any database schemas, for new fields or relations it is recommended to user ",(0,a.jsx)(e.code,{children:"user_data"})," table instead of internal ",(0,a.jsx)(e.code,{children:"user"})," table."]})}),"\n",(0,a.jsx)(e.h3,{id:"transferable",children:"Transferable"}),"\n",(0,a.jsx)(e.p,{children:"A transferable entity doesn't hold information about the owner but defines its own way of checking if current user\r\ncan manage it. For example it can validate the owner using its relations:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",metastring:'title="Minimal Transferable Owner Example"',children:"use Dullahan\\Entity\\Domain\\Attribute as Dullahan;\r\nuse Dullahan\\Entity\\Port\\Domain\\TransferableOwnerManageableInterface;\r\nuse Dullahan\\User\\Domain\\Entity\\UserData;\r\n\r\n#[ORM\\Entity(repositoryClass: CommentRepository::class)]\r\n#[Dullahan\\Entity(CommentConstraint::class)]\r\nclass Comment implements TransferableOwnerManageableInterface\r\n{\r\n    #[Dullahan\\Field, ORM\\Id, ORM\\GeneratedValue, ORM\\Column]\r\n    private ?int $id = null;\r\n\r\n    #[Dullahan\\Field, ORM\\ManyToOne, ORM\\JoinColumn(nullable: false)]\r\n    private ?UserData $userData = null;\r\n\r\n    #[Dullahan\\Field, ORM\\ManyToOne(inversedBy: 'comments'), ORM\\JoinColumn(nullable: false)]\r\n    private ?Post $post = null;\r\n\r\n    public function getId(): ?int\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    public function isOwner(User $user): bool\r\n    {\r\n        return $this->post?->getUser()?->getId() === $user->getId();\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"custom",children:"Custom"}),"\n",(0,a.jsxs)(e.p,{children:["If you want to implement your own ownership verification method you will need to listen for ",(0,a.jsx)(e.code,{children:"VerifyEntityOwnership"})," event and determinate if provided entity should be handled by your custom implementation."]}),"\n",(0,a.jsxs)(e.p,{children:["In this example I've created new interface ",(0,a.jsx)(e.code,{children:"RandomManageableInterface"})," to mark Entities which should be handled by randomized algorithm:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",metastring:'title="RandomManageableInterface.php"',children:"use Dullahan\\Entity\\Port\\Domain\\IdentityAwareInterface;\r\n\r\ninterface RandomManageableInterface extends IdentityAwareInterface {\r\n    public function isOwner(): bool;\r\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Then I listen for ",(0,a.jsx)(e.code,{children:"VerifyEntityOwnership"})," event and if entity implements this interface I run my verification algorithm:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",metastring:'title="RandomOwnershipVerificationListener.php"',children:"class RandomOwnershipVerificationListener {\r\n    public function onVerifyEntityOwnership(VerifyEntityOwnership $event): void\r\n    {\r\n        if (!$event->entity instanceof RandomManageableInterface) {\r\n            return;\r\n        }\r\n\r\n        $event->isValid = random_int(1, 10) > 5;\r\n    }\r\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var r=t(6540);const a={},i=r.createContext(a);function s(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);