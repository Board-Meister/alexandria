"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[7913],{6990:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"marshal/tags","title":"Tagging plugins","description":"In you registration you can tag a plugin. By tagging I means assigning specific labels by which they can","source":"@site/docs/marshal/tags.md","sourceDirName":"marshal","slug":"/marshal/tags","permalink":"/docs/marshal/tags","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/marshal/tags.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"sidebar_label":"Tagging plugins"},"sidebar":"tutorialSidebar","previous":{"title":"Loading resources","permalink":"/docs/marshal/loading-resources"},"next":{"title":"Registration cheat sheet","permalink":"/docs/marshal/registration"}}');var i=r(4848),t=r(8453);const a={sidebar_position:6,sidebar_label:"Tagging plugins"},l="Tagging plugins",c={},o=[{value:"How to tag a plugin",id:"how-to-tag-a-plugin",level:2},{value:"Retrieved tagged plugins",id:"retrieved-tagged-plugins",level:2},{value:"How are plugins passed",id:"how-are-plugins-passed",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"tagging-plugins",children:"Tagging plugins"})}),"\n",(0,i.jsx)(n.p,{children:"In you registration you can tag a plugin. By tagging I means assigning specific labels by which they can\r\nbe later retrieved."}),"\n",(0,i.jsx)(n.h2,{id:"how-to-tag-a-plugin",children:"How to tag a plugin"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"marshal.register({\r\n    entry: {\r\n        // ...\r\n        namespace: 'boardmeister',\r\n        name: 'router',\r\n    },\r\n    tags: ['subscriber'],\r\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the example above we have tagged ",(0,i.jsx)(n.code,{children:"boardmeister/router"})," as a ",(0,i.jsx)(n.code,{children:"subscriber"}),". By itself it doesn't really mean anything.\r\nBut when we combine it with a specific event related plugin (",(0,i.jsx)(n.a,{href:"/docs/herald/",children:"Herald"}),") you've just extended\r\navailable functionality of this plugin significantly."]}),"\n",(0,i.jsx)(n.h2,{id:"retrieved-tagged-plugins",children:"Retrieved tagged plugins"}),"\n",(0,i.jsxs)(n.p,{children:["To retrieve tagged plugins we are using ",(0,i.jsx)(n.code,{children:"requires"})," parameter but in a specific way:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"marshal.register({\r\n    entry: {\r\n        // ...\r\n        namespace: 'boardmeister',\r\n        name: 'herald',\r\n    },\r\n    requires: ['!subscriber']\r\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The exclamation mark ",(0,i.jsx)(n.code,{children:"!"})," tells Marshal that everything after it, is a tag name. Now Marshal will gather all tagged\r\nplugins and pass them as an array into Herald:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="herald.conf.ts"',children:"import type { Module } from '@boardmeister/marshal';\r\nimport type { ISubscriber } from '@src/type.d';\r\n\r\nexport interface IInjected {\r\n  subscribers: { config: ISubscriber, module: Module }[];\r\n}\r\n\r\nclass Herald {\r\n  #injected: IInjected = {\r\n    subscribers: []\r\n  };\r\n\r\n  static inject: Record<string, string> = {\r\n    subscribers: '!subscriber',\r\n  }\r\n  inject(injections: IInjected): void {\r\n    this.#injected = injections;\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now we are able to automatically register all tagged plugins and read to what events they are subscribing to. In\r\nthe same way we can create automatic way to register new routes into router, retrieve menu elements, register logger\r\nchannels etc."}),"\n",(0,i.jsx)(n.h2,{id:"how-are-plugins-passed",children:"How are plugins passed"}),"\n",(0,i.jsx)(n.p,{children:"Plugins in the array are not just instances of the plugins. They consist of plugin definition and their instances."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config"})," - Config parameter holds related plugin registration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"module"})," - holds tagged plugin instance and later (after it was initialized) the initialized state"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"static inject: Record<string, string> = {\r\n    subscribers: '!subscriber',\r\n}\r\ninject(injections: IInjected): void {\r\n    this.#injected = injections;\r\n    this.#injected.subscribers.forEach(subscriber => {\r\n        console.log(subscriber.config, subscriber.module);\r\n    });\r\n}\n"})})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);