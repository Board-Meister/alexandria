"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[4052],{3227:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>s});const n=JSON.parse('{"id":"dullahan/entity/field_attribute","title":"Field Attribute","description":"The Field attribute is a little more then just a marker. It gives ability to attach few static properties to the","source":"@site/docs/dullahan/entity/field_attribute.md","sourceDirName":"dullahan/entity","slug":"/dullahan/entity/field_attribute","permalink":"/docs/dullahan/entity/field_attribute","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/dullahan/entity/field_attribute.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Field Attribute"},"sidebar":"tutorialSidebar","previous":{"title":"First Entity","permalink":"/docs/dullahan/entity/first_object"},"next":{"title":"Entity API","permalink":"/docs/dullahan/entity/crud"}}');var l=i(4848),r=i(8453);const d={sidebar_position:3,sidebar_label:"Field Attribute"},o="Field Attribute",a={},s=[{value:"<code>auto</code>",id:"auto",level:3},{value:"<code>enum</code>",id:"enum",level:3},{value:"<code>important</code>",id:"important",level:3},{value:"<code>limit</code>",id:"limit",level:3},{value:"<code>order</code>",id:"order",level:3},{value:"<code>plural</code>",id:"plural",level:3},{value:"<code>relation</code>",id:"relation",level:3},{value:"<code>type</code>",id:"type",level:3}];function c(e){const t={admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"field-attribute",children:"Field Attribute"})}),"\n",(0,l.jsxs)(t.p,{children:["The ",(0,l.jsx)(t.code,{children:"Field"})," attribute is a little more then just a marker. It gives ability to attach few static properties to the\nfields."]}),"\n",(0,l.jsx)(t.h3,{id:"auto",children:(0,l.jsx)(t.code,{children:"auto"})}),"\n",(0,l.jsxs)(t.p,{children:["Allows you to define a static closure (",(0,l.jsx)(t.code,{children:"forward_static_call"}),") that will return a value for this field."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-php",children:"class Foo {\n    #[Dullahan\\Field(auto: [[LoadService:class, 'load'], 'data.json'])]\n    private string $staticallySetProperty;\n}\n"})}),"\n",(0,l.jsx)(t.h3,{id:"enum",children:(0,l.jsx)(t.code,{children:"enum"})}),"\n",(0,l.jsx)(t.p,{children:"Sets this field enum, to which script will try to convert."}),"\n",(0,l.jsx)(t.admonition,{type:"warning",children:(0,l.jsxs)(t.p,{children:["Has to be accompanied with ",(0,l.jsx)(t.code,{children:"type"})," set to ",(0,l.jsx)(t.code,{children:"FieldTypeEnum::ENUM"}),"."]})}),"\n",(0,l.jsx)(t.h3,{id:"important",children:(0,l.jsx)(t.code,{children:"important"})}),"\n",(0,l.jsx)(t.admonition,{title:"Deprecated",type:"danger"}),"\n",(0,l.jsx)(t.h3,{id:"limit",children:(0,l.jsx)(t.code,{children:"limit"})}),"\n",(0,l.jsxs)(t.p,{children:["This collection when retrieved will be always cut to the specified size in the ",(0,l.jsx)(t.code,{children:"limit"}),"."]}),"\n",(0,l.jsxs)(t.admonition,{type:"info",children:[(0,l.jsxs)(t.mdxAdmonitionTitle,{children:["Data Set ",(0,l.jsx)(t.code,{children:"__max"})]}),(0,l.jsxs)(t.p,{children:["The Data Set attribute ",(0,l.jsx)(t.code,{children:"__max"})," overwrites the ",(0,l.jsx)(t.code,{children:"Field"})," limit."]})]}),"\n",(0,l.jsx)(t.h3,{id:"order",children:(0,l.jsx)(t.code,{children:"order"})}),"\n",(0,l.jsx)(t.p,{children:"Allows to set the default direction in which this entity will be retrieved when accessed as a collection."}),"\n",(0,l.jsx)(t.admonition,{title:"ID",type:"info",children:(0,l.jsx)(t.p,{children:"Order is set by the ID property"})}),"\n",(0,l.jsx)(t.h3,{id:"plural",children:(0,l.jsx)(t.code,{children:"plural"})}),"\n",(0,l.jsx)(t.p,{children:"Allows you to define the plural form of the field. Script automatically creates plural getter for the collections\nand this attribute allows you to define your custom one."}),"\n",(0,l.jsx)(t.h3,{id:"relation",children:(0,l.jsx)(t.code,{children:"relation"})}),"\n",(0,l.jsx)(t.p,{children:"Relation parameter allows you to define relation type this field has. Accepts string and the possible values are:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Doctrine\\ORM\\Mapping\\ManyToMany"}),"\n",(0,l.jsx)(t.li,{children:"Doctrine\\ORM\\Mapping\\OneToMany"}),"\n"]}),"\n",(0,l.jsx)(t.admonition,{title:"Required",type:"warning",children:(0,l.jsx)(t.p,{children:"It is required for any collection type field type"})}),"\n",(0,l.jsx)(t.admonition,{title:"Value deprecated",type:"danger",children:(0,l.jsx)(t.p,{children:"The values are currently relating to doctrine classes which support will be removed in favour of internal relation\ndefinitions"})}),"\n",(0,l.jsx)(t.h3,{id:"type",children:(0,l.jsx)(t.code,{children:"type"})}),"\n",(0,l.jsx)(t.p,{children:"Defines the custom type of the field."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>d,x:()=>o});var n=i(6540);const l={},r=n.createContext(l);function d(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);