"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[44],{7440:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"marshal/methods","title":"Marshal API","description":"Marshal has a few methods and properties open to let you manage your plugins or extends manager itself.","source":"@site/docs/marshal/methods.md","sourceDirName":"marshal","slug":"/marshal/methods","permalink":"/docs/marshal/methods","draft":false,"unlisted":false,"editUrl":"https://github.com/Board-Meister/alexandria/blob/master/docs/marshal/methods.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"sidebar_label":"API"},"sidebar":"tutorialSidebar","previous":{"title":"Registration cheat sheet","permalink":"/docs/marshal/registration"},"next":{"title":"Herald","permalink":"/docs/category/herald"}}');var a=n(4848),d=n(8453);const i={sidebar_position:8,sidebar_label:"API"},l="Marshal API",t={},o=[{value:"Methods",id:"methods",level:2},{value:"<code>addScope()</code>",id:"addscope",level:3},{value:"<code>asset()</code>",id:"asset",level:3},{value:"<code>get()</code>",id:"get",level:3},{value:"<code>getMappedInstance()</code>",id:"getmappedinstance",level:3},{value:"<code>getModuleConstraint()</code>",id:"getmoduleconstraint",level:3},{value:"<code>getResourceUrl()</code>",id:"getresourceurl",level:3},{value:"<code>import()</code>",id:"import",level:3},{value:"<code>load()</code>",id:"load",level:3},{value:"<code>register()</code>",id:"register",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>instanceMap</code>",id:"instancemap",level:3},{value:"<code>loaded</code>",id:"loaded",level:3},{value:"<code>registered</code>",id:"registered",level:3},{value:"<code>scope</code>",id:"scope",level:3},{value:"<code>tagMap</code>",id:"tagmap",level:3},{value:"static <code>version</code>",id:"static-version",level:3}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"marshal-api",children:"Marshal API"})}),"\n",(0,a.jsx)(s.p,{children:"Marshal has a few methods and properties open to let you manage your plugins or extends manager itself."}),"\n",(0,a.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(s.h3,{id:"addscope",children:(0,a.jsx)(s.code,{children:"addScope()"})}),"\n",(0,a.jsx)(s.p,{children:"Manually add new scoped variable:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:"marshal.addScope('version', '1.0.0');\n"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"asset",children:(0,a.jsx)(s.code,{children:"asset()"})}),"\n",(0,a.jsx)(s.p,{children:"Retrieve path to the asset based on the module."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:"marshal.asset(pluginInstance, 'folder/image.png')\n"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"get",children:(0,a.jsx)(s.code,{children:"get()"})}),"\n",(0,a.jsx)(s.p,{children:"Retrieve instance by their constraint name."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:"marshal.get<Marshal>('boardmeister/marshal')\n"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"getmappedinstance",children:(0,a.jsx)(s.code,{children:"getMappedInstance()"})}),"\n",(0,a.jsx)(s.p,{children:"Retrieve instance registration configuration by passing the module."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:"marshal.getMappedInstance(pluginInstance)\n"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"getmoduleconstraint",children:(0,a.jsx)(s.code,{children:"getModuleConstraint()"})}),"\n",(0,a.jsx)(s.p,{children:"Retrieve instance constraint by passing the registration config."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:"marshal.getMappedInstance({\n    entry: {\n        //...\n        namespace: 'boardmeister',\n        name: 'marshal'\n    },\n    //...\n})\n"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"getresourceurl",children:(0,a.jsx)(s.code,{children:"getResourceUrl()"})}),"\n",(0,a.jsx)(s.p,{children:"Retrieve path to the resource based on the module."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:"marshal.getResourceUrl(pluginInstance, 'component/label.js')\n"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"import",children:(0,a.jsx)(s.code,{children:"import()"})}),"\n",(0,a.jsxs)(s.p,{children:["Returns a promise which imports components from the passed source but with set scoped variables. This is basically\n",(0,a.jsx)(s.code,{children:"import"})," but with injected variables. Useful when lazy loading components."]}),"\n",(0,a.jsx)(s.p,{children:"It accepts two arguments:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"path to the resource"}),"\n",(0,a.jsx)(s.li,{children:"additional object to be included as a scoped variables"}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:"await marshal.import(marshal.getResourceUrl(pluginInstance, 'component/userDetails.js'), {\n    userId: 1234,\n})\n"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"load",children:(0,a.jsx)(s.code,{children:"load()"})}),"\n",(0,a.jsx)(s.p,{children:"Loads all registered plugins."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:"await marshal.load()\n"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"register",children:(0,a.jsx)(s.code,{children:"register()"})}),"\n",(0,a.jsxs)(s.p,{children:["Register new plugin. ",(0,a.jsx)(s.a,{href:"/docs/marshal/registration",children:"Read more"})]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:"marshal.register({\n    entry: {\n        source: 'http://cdn.boardmeister.com/plugin/boardmeister/menu-manager',\n        namespace: 'boardmeister',\n        name: 'menu-manager',\n        version: '1.0.0',\n    },\n    type: 'module',\n})\n"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(s.h3,{id:"instancemap",children:(0,a.jsx)(s.code,{children:"instanceMap"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"instanceMap"})," is a WeakMap of initialized module to their registration config."]}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"loaded",children:(0,a.jsx)(s.code,{children:"loaded"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"loaded"})," property holds all loaded and initialized plugins."]}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"registered",children:(0,a.jsx)(s.code,{children:"registered"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"registered"})," property holds all registered and not loaded plugins."]}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"scope",children:(0,a.jsx)(s.code,{children:"scope"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"scope"})," holds all scoped objects."]}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(s.h3,{id:"tagmap",children:(0,a.jsx)(s.code,{children:"tagMap"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"tagMap"})," maps tags to related plugins."]}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsxs)(s.h3,{id:"static-version",children:["static ",(0,a.jsx)(s.code,{children:"version"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"Marshal.version"})," holds the version of the manager."]})]})}function h(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var r=n(6540);const a={},d=r.createContext(a);function i(e){const s=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(d.Provider,{value:s},e.children)}}}]);